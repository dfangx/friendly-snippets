{
  "for": {
    "prefix": "for",
    "body": [
      "for (${1:size_t} ${2:i} = ${3:0}; $2 < ${4:length}; ++$2)", 
      "{",
      "\t$5",
      "}"
    ],
    "description": "Code snippet for 'for' loop"
  },
  "forr": {
    "prefix": "forr",
    "body": [
      "for (${1:int} ${2:i} = ${3:length} - 1; $2 >= ${4:0}; --$2)", 
      "{",
      "\t$5",
      "}"
    ],
    "description": "Code snippet for reverse 'for' loop"
  },
  "while": {
    "prefix": "while",
    "body": [
        "while ($1)",
        "{", 
        "\t$2", 
        "}"
    ],
    "description": "Code snippet for while loop"
  },
  "if": {
    "prefix": "if",
    "body": [
        "if ($1)", 
        "{", 
        "\t$2", 
        "}"
    ],
    "description": "Code snippet for if statement"
  },
  "else": {
    "prefix": "else",
    "body": [
        "else",
        "{", 
        "\t$1", 
        "}"
    ],
    "description": "Code snippet for else statement"
  },
  "else if": {
    "prefix": ["elif", "else if"],
    "body": [
        "else if ($1)",
        "{", 
        "\t$2", 
        "}"
    ],
    "description": "Code snippet for else-if statement"
  },
  "enum": {
    "prefix": "enum",
    "body": [
        "enum ${1:MyEnum}",
        "{", 
        "\t$2", 
        "};"
    ],
    "description": "Code snippet for enum"
  },
  "#ifdef": {
    "prefix": "#ifdef",
    "body": [
        "#ifdef ${1:DEBUG}", 
        "$2", 
        "#endif // $2"
    ],
    "description": "Code snippet for #ifdef"
  },
  "#ifndef": {
    "prefix": "#ifndef",
    "body": [
        "#ifndef ${1:1}", 
        "$2", 
        "#endif // !$1"
    ],
    "description": "Code snippet for #ifndef"
  },
  "#if": {
    "prefix": "#if",
    "body": [
        "#ifdef ${1:0}", 
        "$2", 
        "#endif // $1"
    ],
    "description": "Code snippet for #if"
  },
  "struct": {
    "prefix": "struct",
    "body": [
        "struct ${1:MyStruct}",
        "{", 
        "\t$2", 
        "};"
    ],
    "description": "Code snippet for struct"
  },
  "typedef struct": {
    "prefix": "structt",
    "body": ["typedef struct {", "\t$0", "} ${1:MyStruct};"],
    "description": "Code snippet to define a type with struct"
  },
  "switch": {
    "prefix": "switch",
    "body": [
        "switch (${1:switch_on})",
        "{", 
        "\tdefault:", 
        "\t\tbreak;$2", 
        "}"
    ],
    "description": "Code snippet for switch statement"
  },
  "case": {
    "prefix": "case",
    "body": [
        "case $1:", 
        "\t$2", 
        "\tbreak;$3"],
    "description": "Code snippet for case branch"
  },
  "union": {
    "prefix": "union",
    "body": [
        "union ${1:MyUnion}",
        "{", 
        "\t$2", 
        "};"
    ],
    "description": "Code snippet for union"
  },
  "#inc": {
    "prefix": "#inc",
    "body": ["#include \"$1\""],
    "description": "Code snippet for #include \" \""
  },
  "#inc<": {
    "prefix": "#inc<",
    "body": ["#include <$1>"],
    "description": "Code snippet for #include < >"
  },
  "#def": {
    "prefix": "def",
    "body": ["#define $1"],
    "description": "Code snippet for #define \" \""
  },
  "Main function template": {
    "prefix": "main",
    "body": [
      "int main (int argc, char *argv[])",
      "{",
      "\t$1",
      "\treturn 0;",
      "}"
    ],
    "description": "A standard main function for a C program"
  },
  "Standard Starter Template": {
    "prefix": "sst",
    "body": [
      "#include <stdio.h>",
      "",
      "int main (int argc, char *argv[])",
      "{",
      "\t$1",
      "\treturn 0;",
      "}"
    ],
    "description": "A standard starter template for a C program"
  },
  "Stdlib Variant Starter Template": {
    "prefix": "libsst",
    "body": [
      "#include <stdio.h>",
      "#include <stdlib.h>",
      "",
      "int main (int argc, char *argv[])",
      "{",
      "\t$1",
      "\treturn 0;",
      "}"
    ],
    "description": "A standard starter template for a C program with stdlib included"
  },
  "Do...while loop": {
    "prefix": "dowhile",
    "body": [
        "do",
        "{", 
        "\t$1", 
        "} while($2);"
    ],
    "description": "Creates a do...while loop"
  },
  "Create linked list": {
    "prefix": "clist",
    "body": [
      "typedef struct _node * Link;",
      "typedef struct _node node;",
      "struct _node",
      "{",
      "\tint value;",
      "\tLink next;",
      "};"
    ],
    "description": "Creates a linked list template"
  },
  "Create a function": {
    "prefix": "func",
    "body": ["${2:void} ${1:func}(${4:void})", "{", "\t$3", "}"],
    "description": "Creates a function"
  },
  "Create int function": {
    "prefix": "ifn",
    "body": [
        "int ${1:name} (${2})", 
        "{", 
        "\t$3",
        "\treturn ${4:0};", 
        "}"
    ],
    "description": "Creates a function that returns the int type"
  },
  "Create float function": {
    "prefix": "ffn",
    "body": [
        "float ${1:name} ($2)", 
        "{", 
        "\t$3",
        "\treturn ${4:0.0};", 
        "}"
    ],
    "description": "Creates a function that returns the float type"
  },
  "Create double function": {
    "prefix": "dfn",
    "body": [
        "double ${1:name} ($2)", 
        "{", 
        "\t$3",
        "\treturn ${4:0.0};", 
        "}"
    ],
    "description": "Creates a function that returns the double type"
  },
  "Create string function": {
    "prefix": "sfn",
    "body": [
        "char[] ${1:name} ($2)", 
        "{", 
        "\t$3",
        "\treturn ${4:\"string\"};", 
        "}"
    ],
    "description": "Creates a function that returns the char array type"
  },
  "Create long function": {
    "prefix": "lfn",
    "body": [
        "long ${1:name} ($2)", 
        "{", 
        "\t$3",
        "\treturn ${4:0};", 
        "}"
    ],
    "description": "Creates a function that returns the long type"
  },
  "Print variable of type float (2 decimal places)": {
    "prefix": "plnf",
    "body": ["printf(\"$0 :>> %.2f\\n\", $0);"],
    "description": "Calls printf() to log value of variable of type float rounded to 2 decimal places"
  },
  "Print variable of type integer": {
    "prefix": "plni",
    "body": ["printf(\"$0 :>> %d\\n\", $0);"],
    "description": "Calls printf() to log value of variable of type signed integer"
  },
  "Print variable of type char": {
    "prefix": "plnc",
    "body": ["printf(\"$0 :>> %c\\n\", $0);"],
    "description": "Calls printf() to log value of variable of type char"
  },
  "Print variable of type pointer": {
    "prefix": "plnp",
    "body": ["printf(\"$0 :>> %p\\n\", (void *) $0);"],
    "description": "Calls printf() to log value of variable of type pointer"
  },
  "Print variable of type size_t": {
    "prefix": "plnsz",
    "body": ["printf(\"$0 :>> %zu\\n\", $0);"],
    "description": "Calls printf() to log value of variable of type size_t"
  },
  "Basic print statement": {
    "prefix": "pln",
    "body": ["printf(\"$0\\n\");"],
    "description": "Basic printf() statement"
  },
  "Allocate memory using calloc": {
    "prefix": "cal",
    "body": [
      "$1 *$2 = calloc($3, sizeof($1));",
      "",
      "if (!$2) {",
      "\tprintf(\"Memory allocation failed!\\n\");",
      "\t$4;",
      "}",
      "$5",
      "free($2);"
    ],
    "description": "Allocates memory to a pointer variable using calloc(), then deallocates using free()."
  }
}
